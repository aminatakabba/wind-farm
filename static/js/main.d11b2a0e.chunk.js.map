{"version":3,"sources":["Data.js","App.js","reportWebVitals.js","index.js"],"names":["Data","useState","turbines","setTurbines","useEffect","axios","get","then","response","data","console","log","catch","error","className","map","turbine","style","level","backgroundColor","count","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAqEeA,MAjEf,WAAiB,IAAD,EACoBC,mBAAS,IAD7B,mBACLC,EADK,KACKC,EADL,KA4BZ,OAzBAC,qBAAU,WACNC,IACKC,IADL,iEAEKC,MAAK,SAAAC,GACFL,EAAYK,EAASC,MACrBC,QAAQC,IAAIH,MAEfI,OAAM,SAAAC,GACHH,QAAQC,IAAIE,QAErB,IAgBC,qBAAKC,UAAU,OAAf,SACI,gCACA,kEACI,kCACI,kCACI,0CAGIZ,EAASa,KAAI,SAAAC,GAAO,OAChB,oBAA0BC,MAAyB,IAAlBD,EAAQE,MAAc,CAACC,gBAAiB,WAAa,CAACA,gBAAiB,eAAxG,SAA0HH,EAAQA,SAAzHA,EAAQA,eAG7B,kCACI,uCAEId,EAASa,KAAI,SAAAC,GAAO,OAChB,oBAA0BC,MAAyB,IAAlBD,EAAQE,MAAc,CAACC,gBAAiB,WAAa,CAACA,gBAAiB,eAAxG,SAA0HH,EAAQE,OAAzHF,EAAQA,eAG7B,kCACI,uCAEId,EAASa,KAAI,SAAAC,GAAO,OAChB,oBAA0BC,MAAyB,IAAlBD,EAAQE,MAAc,CAACC,gBAAiB,WAAa,CAACA,gBAAiB,eAAxG,SAA0HH,EAAQI,OAAzHJ,EAAQA,wBC5ClCK,MARf,WACE,OACE,qBAAKP,UAAU,MAAf,SACE,cAAC,EAAD,OCKSQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d11b2a0e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios'; //axios is a library that allows you to fetch an api\r\nimport './Data.css' //css files \r\n\r\nfunction Data() {\r\n    const [turbines, setTurbines] = useState([]);\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(`https://run.mocky.io/v3/6a13fe7e-840c-4d82-b58f-c737139f0e55/`) //promise to fetch the api\r\n            .then(response => {\r\n                setTurbines(response.data); //direction to where the data can be found\r\n                console.log(response); //the data in the api will be showing in the console\r\n            })\r\n            .catch(error => {\r\n                console.log(error) //error will be loged into the console\r\n            })\r\n    }, [])\r\n    \r\n    /* UNFINISHED FUNCTION */\r\n    // The aim of this function was to show the number of turbines damaged in the farm and provide help to the client\r\n    const damagedTurbine = () => {\r\n        var count = 0;\r\n        for(var i = 0; i < turbines.level; ++i){\r\n            if (turbines.level[i] == 2){\r\n                count++; \r\n                console.log('hey')\r\n            }\r\n        } \r\n    }\r\n\r\n    //  This will be rendered to the screen\r\n    return (\r\n        <div className=\"data\">\r\n            <div>\r\n            <h1>Turbine health of your wind farm</h1>\r\n                <table>\r\n                    <tbody>\r\n                        <th>Turbines</th>\r\n                        {/* map through the data and fetch the each type of data to the right place */}\r\n                        {\r\n                            turbines.map(turbine => \r\n                                <td key={turbine.turbine} style={turbine.level === 2 ? {backgroundColor: \"#DA6463\"} : {backgroundColor: \"transparent\"} }>{turbine.turbine}</td> )\r\n                        } \r\n                    </tbody>\r\n                    <tbody>\r\n                        <th>Level</th>\r\n                        {\r\n                            turbines.map(turbine => \r\n                                <td key={turbine.turbine} style={turbine.level === 2 ? {backgroundColor: \"#DA6463\"} : {backgroundColor: \"transparent\"} }>{turbine.level}</td> )   \r\n                        }\r\n                    </tbody>\r\n                    <tbody>\r\n                        <th>Count</th>\r\n                        {\r\n                            turbines.map(turbine => \r\n                                <td key={turbine.turbine} style={turbine.level === 2 ? {backgroundColor: \"#DA6463\"} : {backgroundColor: \"transparent\"} }>{turbine.count}</td> )\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            {/* <div>\r\n                <button onClick={damagedTurbine}>get help</button>\r\n            </div> */}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Data\r\n","import React from 'react';\nimport './App.css'\nimport Data from './Data';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Data />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}